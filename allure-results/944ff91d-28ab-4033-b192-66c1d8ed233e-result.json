{"name": "test_accessibility_on_url", "status": "broken", "statusDetails": {"message": "selenium.common.exceptions.SessionNotCreatedException: Message: session not created: This version of ChromeDriver only supports Chrome version 124\nCurrent browser version is 123.0.6312.122 with binary path C:\\Program Files\\Google\\Chrome\\Application\\chrome.exe\nStacktrace:\n\tGetHandleVerifier [0x00007FF7A514F922+3045234]\n\t(No symbol) [0x00007FF7A4DF3652]\n\t(No symbol) [0x00007FF7A4CB7564]\n\t(No symbol) [0x00007FF7A4CF4A92]\n\t(No symbol) [0x00007FF7A4CF3C92]\n\t(No symbol) [0x00007FF7A4CEDB7B]\n\t(No symbol) [0x00007FF7A4CE9C34]\n\t(No symbol) [0x00007FF7A4D35219]\n\t(No symbol) [0x00007FF7A4D348E0]\n\t(No symbol) [0x00007FF7A4D29B53]\n\t(No symbol) [0x00007FF7A4CF813C]\n\t(No symbol) [0x00007FF7A4CF8D71]\n\tGetHandleVerifier [0x00007FF7A517E89D+3237613]\n\tGetHandleVerifier [0x00007FF7A51C0BA7+3508727]\n\tGetHandleVerifier [0x00007FF7A51B976F+3478975]\n\tGetHandleVerifier [0x00007FF7A4F2F1C6+815126]\n\t(No symbol) [0x00007FF7A4DFED0F]\n\t(No symbol) [0x00007FF7A4DF9854]\n\t(No symbol) [0x00007FF7A4DF99E2]\n\t(No symbol) [0x00007FF7A4DEA574]\n\tBaseThreadInitThunk [0x00007FF9F315257D+29]\n\tRtlUserThreadStart [0x00007FF9F3D2AA58+40]", "trace": "@pytest.fixture\n    def accessibility_driver():\n>       driver = webdriver.Chrome()\n\nTests\\configtest.py:216: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n.venv\\Lib\\site-packages\\selenium\\webdriver\\chrome\\webdriver.py:45: in __init__\n    super().__init__(\n.venv\\Lib\\site-packages\\selenium\\webdriver\\chromium\\webdriver.py:61: in __init__\n    super().__init__(command_executor=executor, options=options)\n.venv\\Lib\\site-packages\\selenium\\webdriver\\remote\\webdriver.py:209: in __init__\n    self.start_session(capabilities)\n.venv\\Lib\\site-packages\\selenium\\webdriver\\remote\\webdriver.py:293: in start_session\n    response = self.execute(Command.NEW_SESSION, caps)[\"value\"]\n.venv\\Lib\\site-packages\\selenium\\webdriver\\remote\\webdriver.py:348: in execute\n    self.error_handler.check_response(response)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\nself = <selenium.webdriver.remote.errorhandler.ErrorHandler object at 0x0000025F9F912480>\nresponse = {'status': 500, 'value': '{\"value\":{\"error\":\"session not created\",\"message\":\"session not created: This version of Chro...07FF7A4DEA574]\\\\n\\\\tBaseThreadInitThunk [0x00007FF9F315257D+29]\\\\n\\\\tRtlUserThreadStart [0x00007FF9F3D2AA58+40]\\\\n\"}}'}\n\n    def check_response(self, response: Dict[str, Any]) -> None:\n        \"\"\"Checks that a JSON response from the WebDriver does not have an\n        error.\n    \n        :Args:\n         - response - The JSON response from the WebDriver server as a dictionary\n           object.\n    \n        :Raises: If the response contains an error message.\n        \"\"\"\n        status = response.get(\"status\", None)\n        if not status or status == ErrorCode.SUCCESS:\n            return\n        value = None\n        message = response.get(\"message\", \"\")\n        screen: str = response.get(\"screen\", \"\")\n        stacktrace = None\n        if isinstance(status, int):\n            value_json = response.get(\"value\", None)\n            if value_json and isinstance(value_json, str):\n                import json\n    \n                try:\n                    value = json.loads(value_json)\n                    if len(value) == 1:\n                        value = value[\"value\"]\n                    status = value.get(\"error\", None)\n                    if not status:\n                        status = value.get(\"status\", ErrorCode.UNKNOWN_ERROR)\n                        message = value.get(\"value\") or value.get(\"message\")\n                        if not isinstance(message, str):\n                            value = message\n                            message = message.get(\"message\")\n                    else:\n                        message = value.get(\"message\", None)\n                except ValueError:\n                    pass\n    \n        exception_class: Type[WebDriverException]\n        e = ErrorCode()\n        error_codes = [item for item in dir(e) if not item.startswith(\"__\")]\n        for error_code in error_codes:\n            error_info = getattr(ErrorCode, error_code)\n            if isinstance(error_info, list) and status in error_info:\n                exception_class = getattr(ExceptionMapping, error_code, WebDriverException)\n                break\n        else:\n            exception_class = WebDriverException\n    \n        if not value:\n            value = response[\"value\"]\n        if isinstance(value, str):\n            raise exception_class(value)\n        if message == \"\" and \"message\" in value:\n            message = value[\"message\"]\n    \n        screen = None  # type: ignore[assignment]\n        if \"screen\" in value:\n            screen = value[\"screen\"]\n    \n        stacktrace = None\n        st_value = value.get(\"stackTrace\") or value.get(\"stacktrace\")\n        if st_value:\n            if isinstance(st_value, str):\n                stacktrace = st_value.split(\"\\n\")\n            else:\n                stacktrace = []\n                try:\n                    for frame in st_value:\n                        line = frame.get(\"lineNumber\", \"\")\n                        file = frame.get(\"fileName\", \"<anonymous>\")\n                        if line:\n                            file = f\"{file}:{line}\"\n                        meth = frame.get(\"methodName\", \"<anonymous>\")\n                        if \"className\" in frame:\n                            meth = f\"{frame['className']}.{meth}\"\n                        msg = \"    at %s (%s)\"\n                        msg = msg % (meth, file)\n                        stacktrace.append(msg)\n                except TypeError:\n                    pass\n        if exception_class == UnexpectedAlertPresentException:\n            alert_text = None\n            if \"data\" in value:\n                alert_text = value[\"data\"].get(\"text\")\n            elif \"alert\" in value:\n                alert_text = value[\"alert\"].get(\"text\")\n            raise exception_class(message, screen, stacktrace, alert_text)  # type: ignore[call-arg]  # mypy is not smart enough here\n>       raise exception_class(message, screen, stacktrace)\nE       selenium.common.exceptions.SessionNotCreatedException: Message: session not created: This version of ChromeDriver only supports Chrome version 124\nE       Current browser version is 123.0.6312.122 with binary path C:\\Program Files\\Google\\Chrome\\Application\\chrome.exe\nE       Stacktrace:\nE       \tGetHandleVerifier [0x00007FF7A514F922+3045234]\nE       \t(No symbol) [0x00007FF7A4DF3652]\nE       \t(No symbol) [0x00007FF7A4CB7564]\nE       \t(No symbol) [0x00007FF7A4CF4A92]\nE       \t(No symbol) [0x00007FF7A4CF3C92]\nE       \t(No symbol) [0x00007FF7A4CEDB7B]\nE       \t(No symbol) [0x00007FF7A4CE9C34]\nE       \t(No symbol) [0x00007FF7A4D35219]\nE       \t(No symbol) [0x00007FF7A4D348E0]\nE       \t(No symbol) [0x00007FF7A4D29B53]\nE       \t(No symbol) [0x00007FF7A4CF813C]\nE       \t(No symbol) [0x00007FF7A4CF8D71]\nE       \tGetHandleVerifier [0x00007FF7A517E89D+3237613]\nE       \tGetHandleVerifier [0x00007FF7A51C0BA7+3508727]\nE       \tGetHandleVerifier [0x00007FF7A51B976F+3478975]\nE       \tGetHandleVerifier [0x00007FF7A4F2F1C6+815126]\nE       \t(No symbol) [0x00007FF7A4DFED0F]\nE       \t(No symbol) [0x00007FF7A4DF9854]\nE       \t(No symbol) [0x00007FF7A4DF99E2]\nE       \t(No symbol) [0x00007FF7A4DEA574]\nE       \tBaseThreadInitThunk [0x00007FF9F315257D+29]\nE       \tRtlUserThreadStart [0x00007FF9F3D2AA58+40]\n\n.venv\\Lib\\site-packages\\selenium\\webdriver\\remote\\errorhandler.py:229: SessionNotCreatedException"}, "attachments": [{"name": "log", "source": "2ace3b38-aa30-491d-a4c5-1f3bc9b88463-attachment.txt", "type": "text/plain"}], "start": 1713872795208, "stop": 1713872795208, "uuid": "03b598dd-6c2c-44a6-a21d-6b966f096ac2", "historyId": "fa0c72019085bb6736b9ef0692590542", "testCaseId": "fa0c72019085bb6736b9ef0692590542", "fullName": "Tests.Accessibility_Test.test_accessibility.TestAccessibility#test_accessibility_on_url", "labels": [{"name": "severity", "value": "critical"}, {"name": "tag", "value": "run(order=15)"}, {"name": "parentSuite", "value": "Tests.Accessibility_Test"}, {"name": "suite", "value": "test_accessibility"}, {"name": "subSuite", "value": "TestAccessibility"}, {"name": "host", "value": "Feuji-006L-R"}, {"name": "thread", "value": "23708-MainThread"}, {"name": "framework", "value": "pytest"}, {"name": "language", "value": "cpython3"}, {"name": "package", "value": "Tests.Accessibility_Test.test_accessibility"}]}